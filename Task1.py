# Задача №1. Решение в группах

# Напишите программу, которая принимает на вход строку, и отслеживает, сколько раз каждый 
# символ уже встречался. Количество повторов добавляется к символам с помощью постфикса 
# формата _n.

# Input: a a a b c a a d c d d
# Output: a a_1 a_2 b c a_3 a_4 d c_1 d_1 d_2

# Для решения данной задачи используйте функцию .split()


# Решение 1:

def track_repetitions(input_string):
    # Разбиваем строку на отдельные символы
    symbols = input_string.split()
    
    # Инициализируем словарь для хранения количества повторений каждого символа
    count_dict = {}
    
    # Инициализируем список для хранения выходных данных
    output_list = []
    
    # Проходим по каждому символу в списке
    for symbol in symbols:
        if symbol in count_dict:
            # Увеличиваем количество повторений символа
            count_dict[symbol] += 1
            # Добавляем символ с постфиксом в выходной список
            output_list.append(f"{symbol}_{count_dict[symbol]}")
        else:
            # Инициализируем количество повторений для нового символа
            count_dict[symbol] = 0
            # Добавляем символ без постфикса в выходной список
            output_list.append(symbol)
    
    # Объединяем выходной список в строку с пробелами и возвращаем результат
    return ' '.join(output_list)

# Пример использования
input_string = "a a a b c a a d c d d"
output_string = track_repetitions(input_string)
print(output_string)

# Этот код выполняет следующее:
# 1. Разбивает входную строку на отдельные символы.
# 2. Инициализирует словарь для отслеживания количества повторений каждого символа.
# 3. Проходит по каждому символу и обновляет словарь с количеством повторений.
# 4. Добавляет символ с соответствующим постфиксом (если повторение) в выходной список.
# 5. Объединяет элементы выходного списка в строку с пробелами между ними и возвращает её.


# Решение 2:

def track_repetitions(input_string):
    symbols = input_string.split()
    count_dict = {}
    output_list = []

    for symbol in symbols:
        count = count_dict.get(symbol, -1) + 1
        count_dict[symbol] = count
        output_list.append(f"{symbol}_{count}" if count > 0 else symbol)

    return ' '.join(output_list)

# Пример использования
input_string = "a a a b c a a d c d d"
output_string = track_repetitions(input_string)
print(output_string)

# Эта программа выполняет ту же задачу, но с более лаконичным кодом:
# 1. Использует метод get словаря для получения текущего количества повторений символа 
# с начальным значением -1.
# 2. Увеличивает счётчик и обновляет словарь.
# 3. Добавляет символ с постфиксом только если количество повторений больше нуля.

"""
Метод .get() словаря в Python позволяет получать значение по ключу с возможностью 
указания значения по умолчанию, если такого ключа в словаре нет. Это полезно для 
упрощения проверки наличия ключа в словаре и его обновления.

В нашем контексте метод .get(symbol, -1) используется следующим образом:
Первый параметр symbol - ключ, по которому мы хотим получить значение из словаря 
count_dict.
Второй параметр -1 - значение по умолчанию, которое возвращается, если ключ symbol 
отсутствует в словаре.
Когда мы пишем count_dict.get(symbol, -1), происходит следующее:

Если symbol уже присутствует в словаре count_dict, возвращается текущее значение, 
связанное с этим ключом (количество уже встреченных повторений).
Если symbol отсутствует в словаре count_dict, возвращается значение по умолчанию -1.
Затем мы увеличиваем это значение на 1, чтобы получить текущее количество повторений для 
этого символа. Таким образом, если символ встречается в первый раз, начальное значение 
будет -1, после увеличения на 1 оно станет 0, что соответствует первому появлению символа 
без постфикса.

Рассмотрим на примере:

Пример: "a a a b c a a d c d d"
Первый символ a:

count_dict.get('a', -1) возвращает -1 (так как a ещё нет в словаре).
Увеличиваем значение: -1 + 1 = 0.
Обновляем словарь: count_dict['a'] = 0.
Добавляем символ без постфикса: output_list.append('a').
Второй символ a:

count_dict.get('a', -1) возвращает 0 (значение для a в словаре).
Увеличиваем значение: 0 + 1 = 1.
Обновляем словарь: count_dict['a'] = 1.
Добавляем символ с постфиксом: output_list.append('a_1').
Третий символ a:

count_dict.get('a', -1) возвращает 1 (значение для a в словаре).
Увеличиваем значение: 1 + 1 = 2.
Обновляем словарь: count_dict['a'] = 2.
Добавляем символ с постфиксом: output_list.append('a_2').
И так далее для каждого символа в строке.

Таким образом, метод .get() помогает нам элегантно обработать первый случай появления 
символа и избежать дополнительных проверок на наличие ключа в словаре.
"""